package com.eth.model;

import java.math.BigDecimal;
import java.util.Map;

import com.eth.model.base.BaseTronAddress;
import com.jfinal.plugin.activerecord.Page;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class TronAddress extends BaseTronAddress<TronAddress> {
	public static final TronAddress dao = new TronAddress().dao();
	private Page<TronTx> txs = new Page<>();
	private BigDecimal minValue = null;
	private BigDecimal minPower = null;
	public void setTxs(Page<TronTx> txs){
		this.txs = txs;
	}
	public Page<TronTx> getTxs(){
		return txs;
	}
	public BigDecimal getMinValue(){
		if(getBalance()!=null){
			minValue = new BigDecimal(getBalance()).divide(new BigDecimal("1000000"));			
		}
		return minValue;
	}
	public BigDecimal getMinPower(){
		if(getPower()!=null){
			minPower = new BigDecimal(getPower()).divide(new BigDecimal("1000000"));			
		}
		return minPower;
	}
	@Override
	protected Map<String, Object> _getAttrs(){
		Map<String, Object> attrs = super._getAttrs();
		attrs.put("txs", this.getTxs());
		attrs.put("minValue", this.getMinValue());
		attrs.put("minPower", this.getMinPower());
		return attrs;
	}
	public Page<TronAddress> getAddressPage(int n, int size) {
		return paginate(n, size, "select *", "from tron_address order by (balance+0) desc");
	}
	public Page<TronTx> getTxsPage(int n, int size) {
		return TronTx.dao.paginate(n, size, "select *", "from tron_tx a, tron_tx_tran b where a.hash = b.hash and (b.tran_from = ? or b.tran_to = ?)  order by a.block desc", getAddress(), getAddress());
	}
}
