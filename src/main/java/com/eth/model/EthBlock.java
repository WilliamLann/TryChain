package com.eth.model;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.List;
import java.util.Map;

import com.eth.model.base.BaseEthBlock;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class EthBlock extends BaseEthBlock<EthBlock> {
	public static final EthBlock dao = new EthBlock().dao();
	private Page<EthTx> txs = new Page<>();
	private String time = null;
	private String periodTime = null;
	public void setTxs(Page<EthTx> txs){
		this.txs = txs;
	}
	public Page<EthTx> getTxs(){
		return txs;
	}
	public String getTime(){
		if(getTimestamp()!=null){
			time = LynxUtil.formatDuring(Long.valueOf(getTimestamp()));
		}
		return time;
	}
	public String getPeriodTime(){
		if(getTimestamp()!=null){
			periodTime = LynxUtil.format(Long.valueOf(getTimestamp()));
		}
		return periodTime;
	}
	@Override
	protected Map<String, Object> _getAttrs(){
		Map<String, Object> attrs = super._getAttrs();
		attrs.put("txs", this.getTxs());
		attrs.put("time", this.getTime());
		attrs.put("periodTime", this.getPeriodTime());
		return attrs;
	}
	public Page<EthTx> getTxsPage(int n, int size){
		return EthTx.dao.paginate(n, size, "select *", "from eth_tx where blockNumber = ?", getNumber());
	}
	public Page<EthBlock> getBlocksPage(int n, int size){
		return paginate(n, size, "select *", "from eth_block order by number desc");
	}

	public Page<EthBlock> getLatestBlocksPage(int n, int size) {
		return paginate(n, size, "select *", "from eth_block where block_date > ? order by number desc",LynxUtil.getLastMonth());
	}
	public List<EthBlock> getLatestBlock() {
		return find("select * from eth_block where block_date = ? order by number desc limit 20", LynxUtil.getToday());
	}
	public List<EthBlock> getTxSum() {
		System.out.println(LynxUtil.getCurrentTime());
		return find("select block_date, sum(transactionsNum) AS txCount from eth_block where block_date >= date(now()) - interval 15 day group by block_date");
	}
	public EthBlock findByHash(String hash){
		return findFirst("select number from eth_block where hash = ?", hash);
	}
	
	public Long getCountByBlockNumber(BigInteger blocknumber) {
		Long count =  Db.queryLong("select count(*) as count from eth_tx where block_date = (select block_date from eth_block where number = ?) and blockNumber = ?",blocknumber,blocknumber);
		return count;
	}
	
	
	
	
	
	
}
