package com.eth.model;

import java.math.BigDecimal;
import java.util.List;
import java.util.Map;

import com.eth.model.base.BaseTronTx;
import com.jfinal.plugin.activerecord.Page;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class TronTx extends BaseTronTx<TronTx> {
	public static final TronTx dao = new TronTx().dao();
	private TronTxFrozen txFrozen = null;
	private TronTxTokenTran txToken = null;
	private TronTxTran txTran = null;
	private List<TronTxVotes> txVotes = null;
	private String time = null;
	private String periodTime = null;
	private String contractTypeStr = null;
	private BigDecimal minValue = null;
	public void setTxFrozen(TronTxFrozen txFrozen){
		this.txFrozen = txFrozen;
	}
	public TronTxFrozen getTxFrozen(){
		return txFrozen;
	}
	public void setTxToken(TronTxTokenTran txToken){
		this.txToken = txToken;
	}
	public TronTxTokenTran getTxToken(){
		return txToken;
	}
	public void setTxTran(TronTxTran txTran){
		this.txTran = txTran;
	}
	public TronTxTran getTxTran(){
		return txTran;
	}
	public void setTxVotes(List<TronTxVotes> txVotes){
		this.txVotes = txVotes;
	}
	public List<TronTxVotes> getTxVotes(){
		return txVotes;
	}
	public String getTime(){
		if(getTimestamp()!=null){
			time = LynxUtil.formatDuring(getTimestamp().getTime()/1000);
		}
		return time;
	}
	public String getPeriodTime(){
		if(getTimestamp()!=null){
			periodTime = LynxUtil.format(getTimestamp().getTime()/1000);
		}
		return periodTime;
	}
	public String getContractTypeStr(){
		if(getContractType()!=null){
			switch(getContractType()){
			case "1":
				contractTypeStr = "转让合约";
				break;
			case "4":
				contractTypeStr = "投票见证合约";
				break;
			case "9":
				contractTypeStr = "代币发布合约";
				break;
			case "11":
				contractTypeStr = "冻结资产合约";
				break;
			}
		}
		return contractTypeStr;
	}
	public BigDecimal getMinValue(){
		if(getStr("tran_value")!=null){
			minValue = new BigDecimal(getStr("tran_value")).divide(new BigDecimal("1000000"));			
		}
		return minValue;
	}
	@Override
	protected Map<String, Object> _getAttrs(){
		Map<String, Object> attrs = super._getAttrs();
		attrs.put("time", this.getTime());
		attrs.put("periodTime", this.getPeriodTime());
		attrs.put("txFrozen", this.getTxFrozen());
		attrs.put("txToken", this.getTxToken());
		attrs.put("txTran", this.getTxTran());
		attrs.put("txVotes", this.getTxVotes());
		attrs.put("contractTypeStr", this.getContractTypeStr());
		attrs.put("minValue", this.getMinValue());
		return attrs;
	}
	public Page<TronTx> getTxsPage(int n, int size) {
		return paginate(n, size, "select *", "from tron_tx where timestamp > ? order by block desc", LynxUtil.getLastMonth());
	}
	public Page<TronTx> getTransfersPage(int n, int size) {
		return paginate(n, size, "select *", "from tron_tx a, tron_tx_tran b where a.hash = b.hash and a.timestamp > ? order by block desc", LynxUtil.getLastMonth());
	}
}
